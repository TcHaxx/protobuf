<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="F_ReadMessage" Id="{f756dacf-686e-48da-9404-f5c6d7862557}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION F_ReadMessage : HRESULT
VAR_IN_OUT
    fbCtx   : FB_ParseContext;     
END_VAR
VAR_INPUT
    iMessage : I_Message;
END_VAR
VAR
    nLength, nOldLength : UDINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
F_ReadMessage := F_ParseLength(fbCtx.refCtx, nLength=> nLength);
IF FAILED(F_ReadMessage) THEN
    RETURN;
END_IF

IF fbCtx.refCtx.stState.nRecursionDepth >= fbCtx.refCtx.stState.nRecursionLimit THEN
    F_ReadMessage := fbCtx.refCtx.stState.eParserErrorCode := E_ParserErrorCode.RecursionLimitExceeded;
    fbCtx.refCtx.stState.bError := TRUE;
    RETURN;
END_IF


F_ReadMessage := F_SbhPushLimit(fbCtx.refCtx.stState, nLength, nCurrentLimit=> nOldLength);
IF FAILED(F_ReadMessage) THEN
    RETURN;
END_IF

fbCtx.refCtx.stState.nRecursionDepth := fbCtx.refCtx.stState.nRecursionDepth + 1;
F_ReadMessage := F_ReadRawMessage(fbCtx, iMessage);

F_ReadMessage := F_CheckReadEndOfStreamTag(fbCtx.refCtx.stState);
IF FAILED(F_ReadMessage) THEN
    RETURN;
END_IF

IF NOT F_SbhIsReachedLimit(fbCtx.refCtx.stState) THEN
    F_ReadMessage := fbCtx.refCtx.stState.eParserErrorCode := E_ParserErrorCode.TruncatedMessage;
    fbCtx.refCtx.stState.bError := TRUE;
    RETURN;
END_IF

fbCtx.refCtx.stState.nRecursionDepth := fbCtx.refCtx.stState.nRecursionDepth - 1;
F_ReadMessage := F_SbhPopLimit(fbCtx.refCtx.stState, nOldLength);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>