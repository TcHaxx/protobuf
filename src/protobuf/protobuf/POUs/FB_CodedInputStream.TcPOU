<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_CodedInputStream" Id="{35b92bb0-d9a1-4930-946e-115771fdcbe2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FINAL FB_CodedInputStream
VAR_IN_OUT CONSTANT
    aBuffer : ARRAY [*] OF BYTE;
END_VAR
VAR
    stState : ST_ParserInternalState;
END_VAR

VAR
    fbFieldCodecInt32       : FB_FieldCodecInt32;
    fbFieldCodecUInt32      : FB_FieldCodecUInt32;
    fbFieldCodecInt64       : FB_FieldCodecInt64;
    fbFieldCodecSInt32      : FB_FieldCodecSInt32;
    fbFieldCodecSInt64      : FB_FieldCodecSInt64;
    fbFieldCodecFixed32     : FB_FieldCodecFixed32;
    fbFieldCodecFixed64     : FB_FieldCodecFixed64;    
    fbFieldCodecFloat       : FB_FieldCodecFloat;
    fbFieldCodecDouble      : FB_FieldCodecDouble;
    fbFieldCodecString      : FB_FieldCodecString;
    fbFieldCodecBytes       : FB_FieldCodecBytes;
    fbFieldCodecBool        : FB_FieldCodecBool;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="DiscardUnknownFields" Id="{f884f980-aa94-4834-b518-e5cf19c5d656}">
      <Declaration><![CDATA[PROPERTY INTERNAL DiscardUnknownFields : BOOL]]></Declaration>
      <Get Name="Get" Id="{f797a18d-253e-4604-aa2e-a6de4fadc50c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DiscardUnknownFields := stState.bDiscardUnknownFields;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ee0e1b08-142e-47e8-b4a9-34c95ea6be2f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stState.bDiscardUnknownFields := DiscardUnknownFields;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="FromBuffer" Id="{988952f7-44b3-4929-8d8b-6c73c13fccc8}">
      <Declaration><![CDATA[METHOD PUBLIC FromBuffer : HRESULT
VAR
    hr : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Reset();

hr := ValidateBuffer(aBuffer);
IF FAILED(hr) THEN
    FromBuffer := hr;
    RETURN;
END_IF

Init(aBuffer);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{8589d263-011f-460b-87a3-c9e951361727}">
      <Declaration><![CDATA[METHOD PRIVATE Init
VAR_IN_OUT CONSTANT
    aBuffer : ARRAY [*] OF BYTE;
END_VAR
VAR
    nSize : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stState.nBufferPos := TO_UDINT(LOWER_BOUND(aBuffer, 1));

nSize := UPPER_BOUND(aBuffer, 1) - LOWER_BOUND(aBuffer, 1);
stState.nBufferSize := TO_UDINT(nSize);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PeekTag" Id="{1d2d4b6e-b454-4c61-afb2-3f3611aef8e7}">
      <Declaration><![CDATA[// Peeks at the next field tag. this is like calling "ReadTag", but the
// tag is not consumed. (So a subsequent call to "ReadTag" will return the same value.)
METHOD PUBLIC PeekTag : HRESULT
VAR_OUTPUT
    nTag : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0041}
PeekTag := F_PeekTag(aBuffer:= THIS^.aBuffer, THIS^.stState, nTag=>nTag);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadBool" Id="{2476259d-ff18-4cf8-8d14-831545e85e8c}">
      <Declaration><![CDATA[METHOD ReadBool : HRESULT
VAR_OUTPUT
    bValue : BOOL;
END_VAR
VAR
    nTmp : BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadBool := F_ParseRawVarint32(aBuffer, stState, nTmp);
bValue := nTmp <> 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadBytes" Id="{c3a41bee-7273-4f77-ab25-cf5e354ee01c}">
      <Declaration><![CDATA[METHOD ReadBytes : HRESULT
VAR_IN_OUT
    aBytes : ARRAY [*] OF BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadBytes := F_ReadBytes(aBuffer, stState, aBytes); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadFixed32" Id="{383a358d-6e6c-41c1-8f44-f530061b2ccb}">
      <Declaration><![CDATA[METHOD PUBLIC ReadFixed32 : HRESULT
VAR_OUTPUT
    nValue : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadFixed32 := F_ParseRawLittleEndian32(aBuffer, stState, nValue=> nValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadFixed64" Id="{eff161e7-d03c-4564-a7dc-112202e0eeb7}">
      <Declaration><![CDATA[METHOD PUBLIC ReadFixed64 : HRESULT
VAR_OUTPUT
    nValue : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadFixed64 := F_ParseRawLittleEndian64(aBuffer, stState, nValue=> nValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadFloat" Id="{43b90ccb-3033-4662-b33c-9e69187be25b}">
      <Declaration><![CDATA[METHOD PUBLIC ReadFloat : HRESULT
VAR_OUTPUT
    fValue : REAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadFloat := F_ParseFloat(aBuffer, stState, fValue=> fValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadInt32" Id="{12ad756a-fd0d-4e8d-a879-b918ff7cbfb0}">
      <Declaration><![CDATA[METHOD PUBLIC ReadInt32 : HRESULT
VAR_OUTPUT
    nValue : DINT;
END_VAR
VAR
    nTmp   : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadInt32 := F_ParseRawVarint32(aBuffer, stState, nTmp);
nValue := TO_DINT(nTmp);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadInt64" Id="{b24953d8-80df-4e67-8c6f-04eca4f9f69a}">
      <Declaration><![CDATA[METHOD PUBLIC ReadInt64 : HRESULT
VAR_OUTPUT
    nValue : LINT;
END_VAR
VAR
    nTmp   : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadInt64 := F_ParseRawVarint64(aBuffer, stState, nTmp);
nValue := TO_LINT(nTmp);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldBool" Id="{75c50ea8-8826-409c-bb4e-2e1a78d69e13}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldBool : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldBool := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecBool, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldBytes" Id="{427f0425-be10-4f88-a51d-0a7461d5d457}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldBytes : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldBytes := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecBytes, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldDouble" Id="{7bdafe38-de8d-4316-9cff-685770e12e00}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldDouble : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldDouble := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecDouble, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldFixed32" Id="{b73970d6-c591-4788-95bd-5861d63c6220}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldFixed32 : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldFixed32 := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecFixed32, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldFixed64" Id="{cb7b5ae6-0e46-42bd-abcb-caf684cb2134}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldFixed64 : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldFixed64 := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecFixed64, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldFloat" Id="{6d914c3c-d0f9-4092-b84a-9301ea3d3b2b}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldFloat : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldFloat := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecFloat, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldInt32" Id="{852a6727-9ea6-4f51-9b88-b6be0abe0089}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldInt32 : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldInt32 := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecInt32, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldInt64" Id="{b4e1ec7b-1d67-4298-a8bc-b359b0c32a99}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldInt64 : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldInt64 := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecInt64, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldSint32" Id="{ca300938-2a6d-4d4a-b6ea-108d5525ff80}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldSint32 : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldSint32 := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecSint32, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldSint64" Id="{845243b5-284c-4673-a272-df0e3c3b4e80}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldSint64 : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldSint64 := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecSint64, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldString" Id="{4251bc82-5932-4b83-a093-f3a37451383b}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldString : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any;
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldString := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecString, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldUint32" Id="{6123f86b-78f5-4253-9330-10a1ff17912b}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldUint32 : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldUint32 := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecUInt32, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRepeatedFieldUint64" Id="{a18342cd-3cbd-41b6-981d-a3bf196de136}">
      <Declaration><![CDATA[METHOD ReadRepeatedFieldUint64 : HRESULT
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadRepeatedFieldUint64 := F_ReadRepeatedField(aBuffer, stState, anyArray, anyFirstElem, ipFieldCodec:= THIS^.fbFieldCodecInt64, nFieldIndex); ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadSFixed64" Id="{7ccdace2-dfaf-4347-bdd1-8a51b9cb7ce5}">
      <Declaration><![CDATA[METHOD PUBLIC ReadSFixed64 : HRESULT
VAR_OUTPUT
    nValue : LINT;
END_VAR
VAR
    nTmp : ULINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadSFixed64 := F_ParseRawLittleEndian64(aBuffer, stState, nValue=> nTmp);

nValue := TO_LINT(nTmp);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadString" Id="{9f6170df-72a4-43cf-9ddd-f238139fccc9}">
      <Declaration><![CDATA[METHOD PUBLIC ReadString : HRESULT
VAR_INPUT
    anyStringOut : ANY_STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ReadString := F_ReadStringInternal(aBuffer, F_ToAnyType(anyStringOut), stState);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadTag" Id="{6e59f247-ef7c-45e6-b2dc-64a50e97c070}">
      <Declaration><![CDATA[// Peeks at the next field tag. this is like calling "ReadTag", but the
// tag is not consumed. (So a subsequent call to "ReadTag" will return the same value.)
METHOD PUBLIC ReadTag : HRESULT
VAR_OUTPUT
    nTag : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0041}
ReadTag := F_ParseTag(aBuffer:= THIS^.aBuffer, THIS^.stState, nTag=>nTag);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadUint32" Id="{0a5f59af-f75a-4d04-8959-1ec62b11e925}">
      <Declaration><![CDATA[METHOD PUBLIC ReadUint32 : HRESULT
VAR_OUTPUT
    nValue : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ReadUint32 := F_ParseRawVarint32(aBuffer, stState, nValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{fd58c7dd-7f7d-45ac-ad92-ef343a22ef8a}">
      <Declaration><![CDATA[METHOD PRIVATE Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stState.bError := FALSE;
stState.eParserErrorCode := S_OK;
stState.nBufferPos := 0;
stState.nBufferSize := 0;
stState.nLastTag := 0;
stState.nNextTag := 0;
stState.bHasNextTag := FALSE;
stState.bDiscardUnknownFields := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTempBuffer" Id="{3117f644-538d-47be-87c2-4e2b358529e1}">
      <Declaration><![CDATA[// Temp. buffer for repeated fields, e.g. string or bytes, if larger then default.
METHOD SetTempBuffer
VAR_INPUT
	anyBuffer : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
THIS^.fbFieldCodecBytes.SetTmpBuffer(anyBytes:= anyBuffer);

THIS^.fbFieldCodecString.SetTmpBuffer(anyString:= anyBuffer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SkipLastField" Id="{55cedb3e-db2f-4d80-9b5d-1d05f6d106d8}">
      <Declaration><![CDATA[METHOD SkipLastField : HRESULT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
SkipLastField := F_SkipLastField(aBuffer, stState);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValidateBuffer" Id="{99a4273f-2c0f-4e07-88a4-2ca0a48b6091}">
      <Declaration><![CDATA[METHOD PRIVATE ValidateBuffer : HRESULT
VAR_IN_OUT CONSTANT
    aBuffer : ARRAY[*] OF BYTE;
END_VAR
VAR
    nSize : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF LOWER_BOUND(aBuffer, 1) < 0 THEN
    ValidateBuffer := E_CodedInputStreamErrorCode.BUFFER_LOWER_BOUND;
    RETURN;
END_IF

nSize := UPPER_BOUND(aBuffer, 1) - LOWER_BOUND(aBuffer, 1);
IF nSize = 0 OR TO_UDINT(nSize) >  Param_PB.cMaxProtobufRawBuffer THEN
    ValidateBuffer := E_CodedInputStreamErrorCode.BUFFER_SIZE;
    RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>