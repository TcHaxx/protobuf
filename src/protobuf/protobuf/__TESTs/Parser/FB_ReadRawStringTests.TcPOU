<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ReadRawStringTests" Id="{cafbe34b-ecc6-4d89-96fe-3d952bade4a5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FINAL FB_ReadRawStringTests EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ShouldReadRawStringTheory();]]></ST>
    </Implementation>
    <Method Name="ShouldReadRawString" Id="{a37e099b-3fcc-4d66-8384-a72fcc19a682}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldReadRawString
VAR_IN_OUT CONSTANT
    aBuffer         : ARRAY[*] OF BYTE;
    sExpectedString : T_MAXSTRING;
END_VAR
VAR_INPUT CONSTANT
    nBufferPosStart     : UDINT;
    nExpectedBufferPos  : UDINT;
END_VAR
VAR
    stState : ST_ParserInternalState;
    hrActual : HRESULT; 
    // '--- ' to check for null-byte!
    sActual : T_MAXSTRING := '--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Arrange
stState.nBufferSize := TO_UDINT(UPPER_BOUND(aBuffer, 1) + 1);
stState.nBufferPos := nBufferPosStart;

// Act
hrActual := F_ReadRawString(aBuffer, LEN2(ADR(sExpectedString)), F_ToAnyType(sActual), stState);

// Assert
AssertEquals_DINT(
     Expected:= S_OK,
     Actual:= hrActual,
     Message:= 'Expected S_OK instead of error');
AssertEquals_STRING(
    Expected:= sExpectedString,
    Actual:= sActual,
    Message:= '');
AssertEquals_UDINT(
    Expected:= nExpectedBufferPos,
    Actual:= stState.nBufferPos,
    Message:= CONCAT(CONCAT('Expected stState.nBufferPos to equal ', TO_STRING(nExpectedBufferPos)), CONCAT(', for String ', LEFT(sExpectedString, 32))));]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldReadRawStringTheory" Id="{f44034ed-9fb4-4f43-8232-d0c583e5fcd7}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldReadRawStringTheory
VAR CONSTANT
    cRawString_Empty    : ARRAY[0..255] OF BYTE := [16#0];
    cRawString_Space    : ARRAY[0..255] OF BYTE := [16#20];
    cRawString_012345   : ARRAY[0..255] OF BYTE := [16#00, 16#00, 16#30, 16#31, 16#32, 16#33, 16#34, 16#35];
    cRawString_UTF8     : ARRAY[0..255] OF BYTE := [16#75, 16#74, 16#66, 16#2D, 16#38, 16#3A, 16#20, 16#61, 16#2D, 16#7A, 16#2C, 16#20, 16#41, 16#2D, 16#5A, 16#2C, 16#20, 16#30, 16#2D, 16#39, 16#2C, 16#20, 16#C3, 16#A4, 16#C3, 16#84, 16#C3, 16#B6, 16#C3, 16#96, 16#C3, 16#BC, 16#C3, 16#9C, 16#C3, 16#9F, 16#F0, 16#9F, 16#9A, 16#80];
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

ShouldReadRawString(aBuffer:= cRawString_Empty, sExpectedString:= '', nBufferPosStart:= 0, nExpectedBufferPos:= 0); 
ShouldReadRawString(aBuffer:= cRawString_Space, sExpectedString:= ' ', nBufferPosStart:= 0, nExpectedBufferPos:= 1); 
ShouldReadRawString(aBuffer:= cRawString_012345, sExpectedString:= '012345', nBufferPosStart:= 2, nExpectedBufferPos:= 8); 
ShouldReadRawString(aBuffer:= cRawString_UTF8, sExpectedString:= 'utf-8: a-z, A-Z, 0-9, äÄöÖüÜß🚀', nBufferPosStart:= 0, nExpectedBufferPos:= 40);
 
TEST_FINISHED_NAMED(__POUNAME());]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>