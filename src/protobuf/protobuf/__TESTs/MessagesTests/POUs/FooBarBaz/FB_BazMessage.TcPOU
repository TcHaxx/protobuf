<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_BazMessage" Id="{98b5f4b2-3063-4e33-a1f5-a23aa9851380}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FINAL FB_BazMessage IMPLEMENTS I_Message

(*
syntax = "proto3";

import "tchaxx-extensions.proto";

message Foo
{
  Bar bar = 1;
  repeated Baz baz = 2 [(tchaxx.ext.v1.array_length) = 3];
}

message Bar
{
  string name = 1;
  uint32 age = 2;
  optional string email = 3;
}

message Baz
{
  fixed32 value = 1;
  string name = 2;
}
*)

VAR
	fbMessageParser : FB_MessageParser(ipMessage:= THIS^);
    fbMessageWriter : FB_MessageWriter(ipMessage:= THIS^);
    stBaz : ST_BAZ;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Baz" Id="{617488c3-63a9-4ea5-9377-3a9f46c0637a}">
      <Declaration><![CDATA[PROPERTY Baz : REFERENCE TO ST_Baz]]></Declaration>
      <Get Name="Get" Id="{4cb69b33-577d-41dd-9a44-6fd54f2aabd2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Baz REF= THIS^.stBaz;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CalculateSize" Id="{1c2ee7ba-a402-4ec0-b4d2-665e7c82c857}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(* Calculates the size of this message in Protocol Buffer wire format, in bytes.*)
METHOD CalculateSize : UDINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="MergeFrom" Id="{01a656b6-337f-423a-a910-0aa23449dd22}">
      <Declaration><![CDATA[{warning 'Add method implementation '}
(* Merges the data from the specified coded input stream with the current message.*)
METHOD MergeFrom : HRESULT
VAR_IN_OUT
	fbParseCtx : FB_ParseContext;
END_VAR
VAR
    nTag : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
REPEAT   
MergeFrom := fbParseCtx.ReadTag(nTag=>nTag);
IF SUCCEEDED(MergeFrom) AND nTag = 0 THEN
    EXIT;
END_IF;

IF FAILED(MergeFrom) THEN
    MergeFrom := MergeFrom;
    RETURN;
END_IF

CASE nTag OF
    16#0D:         // fixed32 value = 1;
          MergeFrom := fbParseCtx.ReadFixed32(nValue=> stBaz.value);
//      
    16#12:         // string name = 2;
          MergeFrom := fbParseCtx.ReadString(anyStringOut:= stBaz.name);
ELSE
    MergeFrom := fbParseCtx.SkipLastField();
END_CASE

UNTIL (FAILED(MergeFrom) OR nTag = 0)
END_REPEAT
]]></ST>
      </Implementation>
    </Method>
    <Property Name="MessageValue" Id="{81753d7c-9326-4f50-a258-bbda360d3bd0}">
      <Declaration><![CDATA[PROPERTY MessageValue : T_Any
]]></Declaration>
      <Get Name="Get" Id="{0e95fa4c-9f32-4508-9509-ea144d415c9e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MessageValue := F_ToAnyType(anyArg:= THIS^.stBaz);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Parser" Id="{44ad5c3c-6e61-4f91-ad79-8466a6ade78b}">
      <Declaration><![CDATA[PROPERTY PUBLIC Parser : REFERENCE TO FB_MessageParser]]></Declaration>
      <Get Name="Get" Id="{9f4894c5-7aca-4fc0-9bb5-0e9841979a9b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Parser REF= THIS^.fbMessageParser;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Writer" Id="{fa70aea1-c254-43eb-9b58-13b9dbded748}">
      <Declaration><![CDATA[(* Writer for this message.*)
PROPERTY Writer : REFERENCE TO FB_MessageWriter
]]></Declaration>
      <Get Name="Get" Id="{7f3b2736-72a2-4e77-939c-33144722d33e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Writer REF= THIS^.fbMessageWriter;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="WriteTo" Id="{b8006ca3-cc58-474d-a5aa-598573cf89d2}">
      <Declaration><![CDATA[(* Writes the data to the given coded output stream.*)
METHOD WriteTo : HRESULT
VAR_IN_OUT
	(* Coded output stream to write the data to. *)
	fbWriteCtx	: FB_WriteContext;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WriteTo := fbWriteCtx.WriteTag(1, E_WireType.Fixed32);
IF FAILED(WriteTo) THEN
    RETURN;
END_IF

WriteTo := fbWriteCtx.WriteFixed32(THIS^.stBaz.value);
IF FAILED(WriteTo) THEN
    RETURN;
END_IF

WriteTo := fbWriteCtx.WriteTag(2, E_WireType.LengthDelimited);
IF FAILED(WriteTo) THEN
    RETURN;
END_IF

WriteTo := fbWriteCtx.WriteString(THIS^.stBaz.name);
IF FAILED(WriteTo) THEN
    RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>