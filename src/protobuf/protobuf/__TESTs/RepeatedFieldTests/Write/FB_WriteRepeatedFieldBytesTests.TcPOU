<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_WriteRepeatedFieldBytesTests" Id="{39b61dae-9095-4700-ad92-d5599f203003}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FINAL FB_WriteRepeatedFieldBytesTests EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	aActual             : ARRAY[0..3] OF ARRAY[0..4] OF BYTE;
    fbFieldCodec 		: FB_FieldCodecBytes(nTag:= 16#0A);
	fbRepeatedField		: FB_RepeatedField(anyArray:= F_ToAnyType(aActual), anyFirstElem:= F_ToAnyType(aActual[0]));
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ShouldWriteRepeatedFieldTheory();]]></ST>
    </Implementation>
    <Method Name="Reset" Id="{3e2b13ec-9767-4c7c-b39c-398ad1080d82}">
      <Declaration><![CDATA[METHOD PRIVATE Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbRepeatedField.Initialize();
MEMSET(destAddr:= ADR(aActual), fillByte:= 16#0, n:= SIZEOF(aActual));]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldWriteRepeatedField" Id="{9c454c45-136c-48c0-8dd6-bf95bc11c34b}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldWriteRepeatedField
VAR_IN_OUT CONSTANT
    aExpected   : ARRAY [*] OF BYTE;
END_VAR
VAR_INPUT
    aValues     : ARRAY[0..3] OF ARRAY[0..4] OF BYTE;
    nLength     : UDINT;
    nTag 		: UDINT;
    nBufferPosStart     : UDINT;
    nExpectedBufferPos  : UDINT;
    ipFieldCodec        : I_FieldCodec;
END_VAR
VAR_INST
    fbCtx   : FB_WriteContext;
END_VAR
VAR
    aActualBuffer       : ARRAY [0..63] OF BYTE;
    hr                  : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Arrange
Reset();
fbCtx.FromBuffer(aActualBuffer);
fbCtx.refCtx.stState.nBufferPos := nBufferPosStart;
ipFieldCodec.Tag := nTag;
fbRepeatedField.InitializeFromArray(anyArray:= F_ToAnyType(aValues), anyFirstElem:= F_ToAnyType(aValues[0]), nCount:= nLength);

// Act
hr := fbRepeatedField.WriteTo(fbWriteCtx:= fbCtx, ipFieldCodec:= ipFieldCodec);

// Assert
AssertEquals_DINT(
    Expected:= S_OK,
    Actual:= hr,
    Message:= 'Expected S_OK instead of error');
    
{warning disable C0041}
AssertArrayEquals_BYTE(Expecteds:= aExpected, Actuals:= aActualBuffer, Message:= '');
 
AssertEquals_UDINT(
    Expected:= nExpectedBufferPos,
    Actual:= fbCtx.refCtx.stState.nBufferPos,
    Message:= CONCAT('Expected stState.nBufferPos to equal ', TO_STRING(nExpectedBufferPos)));

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldWriteRepeatedFieldTheory" Id="{c3730157-5938-4cca-9ab0-35780301beb5}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldWriteRepeatedFieldTheory : REFERENCE TO FB_Test
VAR CONSTANT
    aExpectedBufferZeroLen  : ARRAY[0..63] OF BYTE := [16#00, 16#00];
    aExpectedBuffer1        : ARRAY[0..63] OF BYTE := [16#00, 16#1A, 16#05, 16#00, 16#FF, 16#01, 16#00, 16#00, 16#1A, 16#05, 16#2A, 16#45, 16#7B, 16#00, 16#FF];
END_VAR

VAR CONSTANT
    aValueZeroLen           : ARRAY[0..3] OF ARRAY[0..4] OF BYTE := [];
    aValue1                 : ARRAY[0..3] OF ARRAY[0..4] OF BYTE := [[0, 255, 1], [42, 69, 123, 0 , 255]];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());
ShouldWriteRepeatedField(aExpected:= aExpectedBufferZeroLen, aValues:= aValueZeroLen, nLength:= 0, nTag:= F_MakeTag(1, E_WireType.LengthDelimited), nBufferPosStart:= 0, nExpectedBufferPos:= 0, ipFieldCodec:= THIS^.fbFieldCodec);
ShouldWriteRepeatedField(aExpected:= aExpectedBuffer1, aValues:= aValue1, nLength:= 2, nTag:= F_MakeTag(3, E_WireType.LengthDelimited), nBufferPosStart:= 1, nExpectedBufferPos:= 15, ipFieldCodec:= THIS^.fbFieldCodec);
TEST_FINISHED_NAMED(__POUNAME());]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>