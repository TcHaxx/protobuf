<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_WriteRepeatedFieldSInt32Tests" Id="{59c37817-090d-495b-bc0c-865118cea1a9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FINAL FB_WriteRepeatedFieldSInt32Tests EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbFieldCodec : FB_FieldCodecSInt32(nTag:= 0);
	aActual    	 : ARRAY [0..7] OF DINT;
	fbRepeatedField		: FB_RepeatedField(anyArray:= F_ToAnyType(aActual), anyFirstElem:= F_ToAnyType(aActual[0]));
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ShouldWriteRepeatedFieldTheory();]]></ST>
    </Implementation>
    <Method Name="Reset" Id="{05d06d30-9474-4672-b9d2-00482482c2cc}">
      <Declaration><![CDATA[METHOD PRIVATE Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbRepeatedField.Initialize();
MEMSET(destAddr:= ADR(aActual), fillByte:= 16#0, n:= SIZEOF(aActual));]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldWriteRepeatedField" Id="{e027820a-4a51-4634-90ab-bea5f6d261b9}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldWriteRepeatedField
VAR_IN_OUT CONSTANT
    aExpected   : ARRAY [*] OF BYTE;
END_VAR
VAR_INPUT
    aValues     : ARRAY [0..7] OF DINT;
    nLength     : UDINT;
    nTag        : UDINT;
    nBufferPosStart     : UDINT;
    nExpectedBufferPos  : UDINT;
    ipFieldCodec        : I_FieldCodec;
END_VAR
VAR_INST
    fbCtx   : FB_WriteContext;
END_VAR
VAR
    aActualBuffer       : ARRAY [0..63] OF BYTE;
    hr                  : HRESULT;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Arrange
Reset();
fbCtx.FromBuffer(aActualBuffer);
fbCtx.refCtx.stState.nBufferPos := nBufferPosStart;
ipFieldCodec.Tag := nTag;
fbRepeatedField.InitializeFromArray(anyArray:= F_ToAnyType(aValues), anyFirstElem:= F_ToAnyType(aValues[0]), nCount:= nLength);

// Act
hr := fbRepeatedField.WriteTo(fbWriteCtx:= fbCtx, ipFieldCodec:= ipFieldCodec);

// Assert
AssertEquals_DINT(
    Expected:= S_OK,
    Actual:= hr,
    Message:= 'Expected S_OK instead of error');
    
{warning disable C0041}
AssertArrayEquals_BYTE(Expecteds:= aExpected, Actuals:= aActualBuffer, Message:= '');
 
AssertEquals_UDINT(
    Expected:= nExpectedBufferPos,
    Actual:= fbCtx.refCtx.stState.nBufferPos,
    Message:= CONCAT('Expected stState.nBufferPos to equal ', TO_STRING(nExpectedBufferPos)));

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldWriteRepeatedFieldTheory" Id="{a2597ecb-9ff7-4278-bef7-61b9fc12809f}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldWriteRepeatedFieldTheory : REFERENCE TO FB_Test
VAR CONSTANT
    cRawValueZeroLength     : ARRAY[0..63] OF BYTE := [16#00, 16#00];
    cRawValue1              : ARRAY[0..63] OF BYTE := [16#00, 16#0A, 16#09, 16#00, 16#02, 16#01, 16#F2, 16#14, 16#F1, 16#14, 16#F2, 16#6C];  
END_VAR

VAR CONSTANT
    aExpectedZeroLength     : ARRAY [0..7] OF DINT := [0, 0, 0, 0, 0, 0, 0, 0];
    aExpected1              : ARRAY [0..7] OF DINT := [0, 1, -1, 1337, -1337, 6969, 0];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

ShouldWriteRepeatedField(aExpected:= cRawValueZeroLength, aValues:= aExpectedZeroLength, nLength:= 0, nTag:= F_MakeTag(1, E_WireType.LengthDelimited), nBufferPosStart:= 0, nExpectedBufferPos:= 0, ipFieldCodec:= THIS^.fbFieldCodec);
ShouldWriteRepeatedField(aExpected:= cRawValue1, aValues:= aExpected1, nLength:= 6, nTag:= F_MakeTag(1, E_WireType.LengthDelimited), nBufferPosStart:= 1, nExpectedBufferPos:= 12, ipFieldCodec:= THIS^.fbFieldCodec);

TEST_FINISHED_NAMED(__POUNAME());]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>