<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ReadRepeatedFieldStringTests" Id="{481fde89-a9de-4d33-b2f7-5458b704ebce}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FINAL FB_ReadRepeatedFieldStringTests EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	aActual             : ARRAY[0..15] OF T_MAXSTRING;
	fbFieldCodec 		: FB_FieldCodecString(nTag:= 16#0A);
	fbRepeatedField		: FB_RepeatedField(anyArray:= F_ToAnyType(aActual), anyFirstElem:= F_ToAnyType(aActual[0]));
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ShouldReadRepeatedFieldTheory();]]></ST>
    </Implementation>
    <Method Name="Reset" Id="{1c8c438b-d050-4f72-b369-bb45a3827b46}">
      <Declaration><![CDATA[METHOD PRIVATE Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbRepeatedField.Initialize();
MEMSET(destAddr:= ADR(aActual), fillByte:= 16#0, n:= SIZEOF(aActual));]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldReadRepeatedField" Id="{ea7665fd-02f2-480a-9007-efe05cdec4ed}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldReadRepeatedField
VAR_IN_OUT CONSTANT
    aBuffer     : ARRAY [*] OF BYTE;
    aExpected   : ARRAY [*] OF T_MAXSTRING;
END_VAR
VAR_INPUT CONSTANT
    nBufferPosStart     : UDINT;
    nExpectedBufferPos  : UDINT;
    nExpectedFieldIndex : UDINT;
    ipFieldCodec        : I_FieldCodec;
END_VAR
VAR_INST
    fbCtx               : FB_ParseContext;
END_VAR
VAR
    
    hr                  : HRESULT;
    nTag                : UDINT;
    i                   : DINT;
    aTmpBuffer          : ARRAY[0..1023] OF BYTE := [SIZEOF(aTmpBuffer)(16#FF)];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Arrange
Reset();
fbCtx.FromBuffer(aBuffer);
fbCtx.refCtx.stState.nBufferPos := nBufferPosStart;

THIS^.fbFieldCodec.SetTmpBuffer(anyString:= F_ToAnyBytes(aTmpBuffer));

// Act
F_ParseTag(fbCtx.refCtx, nTag=> nTag);
hr := fbRepeatedField.AddEntriesFrom(fbParseCtx:= fbCtx, ipFieldCodec:= ipFieldCodec);

// Assert
AssertEquals_DINT(
    Expected:= S_OK,
    Actual:= hr,
    Message:= 'Expected S_OK instead of error');
    
{warning disable C0041}
// AssertArrayEquals_(Expecteds:= aExpected, Actuals:= aActual, Message:= '');
FOR i := 0  TO UPPER_BOUND(aExpected, 1) DO 
    AssertEquals_STRING(Expected:= aExpected[i], Actual:= aActual[i], Message:= '');
END_FOR

AssertEquals_UDINT(
    Expected:= nExpectedBufferPos,
    Actual:= fbCtx.refCtx.stState.nBufferPos,
    Message:= CONCAT('Expected stState.nBufferPos to equal ', TO_STRING(nExpectedBufferPos)));
    
AssertEquals_UDINT(
    Expected:= nExpectedFieldIndex,
    Actual:= fbRepeatedField.nCount,
    Message:= CONCAT('Expected fbRepeatedField.nCount to equal ', TO_STRING(nExpectedFieldIndex)));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldReadRepeatedFieldTheory" Id="{e5fc16b6-2350-4421-bb6e-d4de18745678}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldReadRepeatedFieldTheory : REFERENCE TO FB_Test
VAR CONSTANT
    cRawValueString1    : ARRAY[0..255] OF BYTE := [16#0A, 16#0B, 16#54, 16#65, 16#73, 16#74, 16#53, 16#74, 16#72, 16#69, 16#6E, 16#67, 16#30, 16#0A, 16#0B, 16#54, 16#65, 16#73, 16#74, 16#53, 16#74, 16#72, 16#69, 16#6E, 16#67, 16#31, 16#0A, 16#0B, 16#54, 16#65, 16#73, 16#74, 16#53, 16#74, 16#72, 16#69, 16#6E, 16#67, 16#32, 16#0A, 16#0B, 16#54, 16#65, 16#73, 16#74, 16#53, 16#74, 16#72, 16#69, 16#6E, 16#67, 16#33];
    
END_VAR

VAR CONSTANT
    aExpectedString1        : ARRAY[0..15] OF T_MAXSTRING := ['TestString0', 'TestString1', 'TestString2', 'TestString3'];
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

ShouldReadRepeatedField(aBuffer:= cRawValueString1, aExpected:= aExpectedString1, nBufferPosStart:= 0, nExpectedBufferPos:= 53, nExpectedFieldIndex:= 4, THIS^.fbFieldCodec);

TEST_FINISHED_NAMED(__POUNAME());]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>