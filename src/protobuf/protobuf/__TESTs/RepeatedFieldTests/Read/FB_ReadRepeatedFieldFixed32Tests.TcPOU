<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ReadRepeatedFieldFixed32Tests" Id="{0262274a-c960-4ad8-92d1-7a52fe0fc4cd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FINAL FB_ReadRepeatedFieldFixed32Tests EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    fbFieldCodec : FB_FieldCodecFixed32;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ShouldReadRepeatedFieldTheory();
ShouldReadNonConsecutiveRepeatedFields(); ]]></ST>
    </Implementation>
    <Method Name="ShouldReadNonConsecutiveRepeatedFields" Id="{433c45b7-2759-4c34-8a72-9f5dccca30e9}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldReadNonConsecutiveRepeatedFields
VAR CONSTANT
    (*
        message Demo {
            repeated uint32 a = 1;
            fixed32 b =2;
        }
        JSON:
        {
          "a": [
            0, 1, 2, 151
          ],
          "b": 321
        }
    *)
    cRawMessage : ARRAY[0..15] OF BYTE := [16#0A, 16#03, 16#00, 16#01, 16#02, 16#15, 16#41, 16#01, 16#00, 16#00, 16#0A, 16#02, 16#97, 16#01];
    cExpected   : ARRAY[0..15] OF BYTE := [0, 1, 2, 151];
END_VAR
VAR_INST
    fbCtx               : FB_ParseContext;
    fbFieldCodecInt32 : FB_FieldCodecInt32;
END_VAR
VAR
    aActual             : ARRAY [0..15] OF BYTE;
    hr                  : HRESULT;
    nActualFieldIndex   : UDINT;
    nB                  : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

// Arrange
fbCtx.FromBuffer(cRawMessage);

// Act
// Parses a=[0,1,2]: 16#0A, 16#03, 16#00, 16#01, 16#02
F_ParseTag(fbCtx.refCtx, nTag=> );
hr := F_ReadRepeatedField(fbCtx.refCtx, anyArray:= F_ToAnyType(aActual), anyFirstElem:= F_ToAnyType(aActual[0]), ipFieldCodec:= fbFieldCodecInt32,  nFieldIndex:= nActualFieldIndex);

// Parses b=321: 16#15, 16#41, 16#01, 16#00, 16#00
F_ParseTag(fbCtx.refCtx, nTag=> );
F_ParseRawLittleEndian32(fbCtx.refCtx, nValue=> nB);

// Parses a=[151]: 16#0A, 16#02, 16#97, 16#01
F_ParseTag(fbCtx.refCtx, nTag=> );
hr := F_ReadRepeatedField(fbCtx.refCtx, anyArray:= F_ToAnyType(aActual), anyFirstElem:= F_ToAnyType(aActual[0]), ipFieldCodec:= fbFieldCodecInt32, nFieldIndex:= nActualFieldIndex);

// Assert
AssertEquals_DINT(
    Expected:= S_OK,
    Actual:= hr,
    Message:= 'Expected S_OK instead of error');
    
{warning disable C0041}
AssertArrayEquals_BYTE(Expecteds:= cExpected, Actuals:= aActual, Message:= '');
    
AssertEquals_UDINT(
    Expected:= 4,
    Actual:= nActualFieldIndex,
    Message:= CONCAT('Expected nActualFieldIndex to equal ', TO_STRING(4)));
    
TEST_FINISHED_NAMED(__POUNAME());]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldReadRepeatedField" Id="{f5e4b169-ab63-40a0-aad4-6ff8c1081522}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldReadRepeatedField
VAR_IN_OUT CONSTANT
    aBuffer     : ARRAY [*] OF BYTE;
    aExpected   : ARRAY [*] OF DINT;
END_VAR
VAR_INPUT CONSTANT
    nBufferPosStart     : UDINT;
    nExpectedBufferPos  : UDINT;
    nExpectedFieldIndex : UDINT;
    ipFieldCodec        : I_FieldCodec;
END_VAR
VAR_INST
    fbCtx               : FB_ParseContext;
END_VAR
VAR
    aActual             : ARRAY [0..7] OF DINT;
    hr                  : HRESULT;
    nActualFieldIndex   : UDINT;
    nTag                : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Arrange
fbCtx.FromBuffer(aBuffer);
fbCtx.refCtx.stState.nBufferPos := nBufferPosStart;;

// Act
F_ParseTag(fbCtx.refCtx, nTag=> nTag);
hr := F_ReadRepeatedField(fbCtx.refCtx, anyArray:= F_ToAnyType(aActual), anyFirstElem:= F_ToAnyType(aActual[0]), ipFieldCodec, nFieldIndex:= nActualFieldIndex);

// Assert
AssertEquals_DINT(
    Expected:= S_OK,
    Actual:= hr,
    Message:= 'Expected S_OK instead of error');
    
{warning disable C0041}
AssertArrayEquals_DINT(Expecteds:= aExpected, Actuals:= aActual, Message:= '');
 
AssertEquals_UDINT(
    Expected:= nExpectedBufferPos,
    Actual:= fbCtx.refCtx.stState.nBufferPos,
    Message:= CONCAT('Expected stState.nBufferPos to equal ', TO_STRING(nExpectedBufferPos)));
    
AssertEquals_UDINT(
    Expected:= nExpectedFieldIndex,
    Actual:= nActualFieldIndex,
    Message:= CONCAT('Expected nActualFieldIndex to equal ', TO_STRING(nExpectedFieldIndex)));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldReadRepeatedFieldTheory" Id="{901da591-6ef9-463e-abbc-5aea1eb7096d}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldReadRepeatedFieldTheory : REFERENCE TO FB_Test
(*
    syntax = "proto3";
    
    message exampleMessage
    {
      repeated fixed32 repeatedFixed32 = 4;
    }
*)
VAR CONSTANT
    cRawValueZeroLength     : ARRAY[0..31] OF BYTE := [16#22, 16#00];       // field #4
    cRawValue1              : ARRAY[0..31] OF BYTE := [16#00, 16#22, 16#18, 16#00, 16#00, 16#00, 16#00, 16#D2, 16#04, 16#00, 16#00, 16#39, 16#05, 16#00, 16#00, 16#FF, 16#FF, 16#FF, 16#FF, 16#C7, 16#FA, 16#FF, 16#FF, 16#4E, 16#61, 16#BC, 16#00];
    
END_VAR

VAR CONSTANT
    aExpectedZeroLength     : ARRAY [0..7] OF DINT := [0, 0, 0, 0, 0, 0, 0, 0];
    aExpected1              : ARRAY [0..7] OF DINT := [0, 1234, 1337, -1, -1337, 12345678, 0, 0];
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

ShouldReadRepeatedField(aBuffer:= cRawValueZeroLength, aExpected:= aExpectedZeroLength, nBufferPosStart:= 0, nExpectedBufferPos:= 2, nExpectedFieldIndex:= 0, ipFieldCodec:= THIS^.fbFieldCodec);
ShouldReadRepeatedField(aBuffer:= cRawValue1, aExpected:= aExpected1, nBufferPosStart:= 1, nExpectedBufferPos:= 27, nExpectedFieldIndex:= 6, ipFieldCodec:= THIS^.fbFieldCodec);

TEST_FINISHED_NAMED(__POUNAME());]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>