<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ReadRepeatedFieldUint32Tests" Id="{ad7e2776-a3c9-408c-862a-d62e24a91dfe}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FINAL FB_ReadRepeatedFieldUint32Tests EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	aActual             : ARRAY [0..15] OF UDINT;
	fbFieldCodec 		: FB_FieldCodecUInt32(nTag:= 16#0A);
	fbRepeatedField		: FB_RepeatedField(anyArray:= F_ToAnyType(aActual), anyFirstElem:= F_ToAnyType(aActual[0]));
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ShouldReadRepeatedFieldTheory();
ShouldReadNonConsecutiveRepeatedFields(); ]]></ST>
    </Implementation>
    <Method Name="Reset" Id="{fa1a9f5e-9ae4-4f86-8213-54d7de635da0}">
      <Declaration><![CDATA[METHOD PRIVATE Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbRepeatedField.Initialize();
MEMSET(destAddr:= ADR(aActual), fillByte:= 16#0, n:= SIZEOF(aActual));]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldReadNonConsecutiveRepeatedFields" Id="{45feac8a-cc21-481b-a5cb-2c0bf34bfeb8}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldReadNonConsecutiveRepeatedFields
VAR CONSTANT
    (*
        message Demo {
            repeated uint32 a = 1;
            fixed32 b =2;
        }
        JSON:
        {
          "a": [
            0, 1, 2, 151
          ],
          "b": 321
        }
    *)
    cRawMessage : ARRAY[0..15] OF BYTE := [16#0A, 16#03, 16#00, 16#01, 16#02, 16#15, 16#41, 16#01, 16#00, 16#00, 16#0A, 16#02, 16#97, 16#01];
    cExpected   : ARRAY[0..15] OF UDINT := [0, 1, 2, 151];
END_VAR
VAR_INST
    fbCtx               : FB_ParseContext;
END_VAR
VAR
    hr                  : HRESULT;
    nB                  : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

// Arrange
Reset();
fbCtx.FromBuffer(cRawMessage);

// Act
// Parses a=[0,1,2]: 16#0A, 16#03, 16#00, 16#01, 16#02
F_ParseTag(fbCtx.refCtx, nTag=> );
hr := fbRepeatedField.AddEntriesFrom(fbParseCtx:= fbCtx, ipFieldCodec:= fbFieldCodec);

// Parses b=321: 16#15, 16#41, 16#01, 16#00, 16#00
F_ParseTag(fbCtx.refCtx, nTag=> );
F_ParseRawLittleEndian32(fbCtx.refCtx, nValue=> nB);

// Parses a=[151]: 16#0A, 16#02, 16#97, 16#01
F_ParseTag(fbCtx.refCtx, nTag=> );
hr := fbRepeatedField.AddEntriesFrom(fbParseCtx:= fbCtx, ipFieldCodec:= fbFieldCodec);

// Assert
AssertEquals_DINT(
    Expected:= S_OK,
    Actual:= hr,
    Message:= 'Expected S_OK instead of error');
    
{warning disable C0041}
AssertArrayEquals_UDINT(Expecteds:= cExpected, Actuals:= aActual, Message:= '');
    
AssertEquals_UDINT(
    Expected:= 4,
    Actual:= fbRepeatedField.nCount,
    Message:= CONCAT('Expected fbRepeatedField.nCount to equal ', TO_STRING(4)));
   
AssertEquals_UDINT(
    Expected:= 321,
    Actual:= nB,
    Message:= CONCAT('Expected nB to equal ', TO_STRING(321)));
 
TEST_FINISHED_NAMED(__POUNAME());]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldReadRepeatedField" Id="{e0890fb1-e6b2-423a-a94a-be1677da6155}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldReadRepeatedField
VAR_IN_OUT CONSTANT
    aBuffer   			: ARRAY [*] OF BYTE;
    aExpected 			: ARRAY [*] OF UDINT;
END_VAR
VAR_INPUT CONSTANT
    nBufferPosStart     : UDINT;
    nExpectedBufferPos  : UDINT;
    nExpectedFieldIndex : UDINT;
    ipFieldCodec        : I_FieldCodec;
END_VAR
VAR_INST
    fbCtx               : FB_ParseContext;
END_VAR
VAR    
    hr                  : HRESULT;
    nTag                : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Arrange
Reset();
fbCtx.FromBuffer(aBuffer);
fbCtx.refCtx.stState.nBufferPos := nBufferPosStart;

// Act
F_ParseTag(fbCtx.refCtx, nTag=> nTag);
hr := fbRepeatedField.AddEntriesFrom(fbParseCtx:= fbCtx, ipFieldCodec:= ipFieldCodec);

// Assert
AssertEquals_DINT(
    Expected:= S_OK,
    Actual:= hr,
    Message:= 'Expected S_OK instead of error');
    
{warning disable C0041}
AssertArrayEquals_UDINT(Expecteds:= aExpected, Actuals:= aActual, Message:= '');
 
AssertEquals_UDINT(
    Expected:= nExpectedBufferPos,
    Actual:= fbCtx.refCtx.stState.nBufferPos,
    Message:= CONCAT('Expected stState.nBufferPos to equal ', TO_STRING(nExpectedBufferPos)));
    
AssertEquals_UDINT(
    Expected:= nExpectedFieldIndex,
    Actual:= fbRepeatedField.nCount,
    Message:= CONCAT('Expected fbRepeatedField.nCount to equal ', TO_STRING(nExpectedFieldIndex)));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldReadRepeatedFieldTheory" Id="{0d53312c-bed0-4be6-a5e4-c857a27b82d7}">
      <Declaration><![CDATA[{warning 'TODO: Add better tests for UInt32'}
METHOD PRIVATE ShouldReadRepeatedFieldTheory : REFERENCE TO FB_Test
VAR CONSTANT
    cRawValueZeroLength     : ARRAY[0..15] OF BYTE := [16#0A, 16#00];
    cRawValue1              : ARRAY[0..15] OF BYTE := [16#00, 16#0A, 16#07, 16#00, 16#01, 16#FF, 16#01, 16#96, 16#01, 16#04];
END_VAR

VAR CONSTANT
    aExpectedZeroLength     : ARRAY [0..15] OF UDINT := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    aExpected1             	: ARRAY [0..15] OF UDINT := [0, 1, 255, 150, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

ShouldReadRepeatedField(aBuffer:= cRawValueZeroLength, aExpected:= aExpectedZeroLength, nBufferPosStart:= 0, nExpectedBufferPos:= 2, nExpectedFieldIndex:= 0, ipFieldCodec:= THIS^.fbFieldCodec);
ShouldReadRepeatedField(aBuffer:= cRawValue1, aExpected:= aExpected1, nBufferPosStart:= 1, nExpectedBufferPos:= 10, nExpectedFieldIndex:= 5, ipFieldCodec:= THIS^.fbFieldCodec);

TEST_FINISHED_NAMED(__POUNAME());]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>