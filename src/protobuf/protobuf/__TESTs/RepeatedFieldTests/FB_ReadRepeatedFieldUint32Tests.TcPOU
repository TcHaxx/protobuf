<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ReadRepeatedFieldUint32Tests" Id="{ad7e2776-a3c9-408c-862a-d62e24a91dfe}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FINAL FB_ReadRepeatedFieldUint32Tests EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ShouldReadRepeatedFieldTheory();]]></ST>
    </Implementation>
    <Method Name="ShouldReadRepeatedField" Id="{e0890fb1-e6b2-423a-a94a-be1677da6155}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldReadRepeatedField
VAR_IN_OUT CONSTANT
    aBuffer     : ARRAY [*] OF BYTE;
    aExpected   : ARRAY [*] OF BYTE;
END_VAR
VAR_INPUT CONSTANT
    nBufferPosStart     : UDINT;
    nExpectedBufferPos  : UDINT;
    nExpectedFieldIndex : UDINT;
END_VAR
VAR_INST
    stState : ST_ParserInternalState;
END_VAR
VAR
    aActual             : ARRAY [0..15] OF BYTE;
    hr                  : HRESULT;
    nActualFieldIndex   : UDINT;
    nTag                : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Arrange
stState.nBufferPos := nBufferPosStart;
stState.nBufferSize := TO_UDINT(UPPER_BOUND(aBuffer, 1) + 1);

// Act
F_ParseTag(aBuffer, stState, nTag=> );
hr := F_ReadRepeatedFieldUint32(aBuffer, stState, anyArray:= F_ToAnyType(aActual), anyFirstElem:= F_ToAnyNum(aActual[0]), nFieldIndex:= nActualFieldIndex);

// Assert
AssertEquals_DINT(
    Expected:= S_OK,
    Actual:= hr,
    Message:= 'Expected S_OK instead of error');
    
AssertArrayEquals_BYTE(
    Expecteds:= aExpected,
    Actuals:= aActual,
    Message:= '');
 
AssertEquals_UDINT(
    Expected:= nExpectedBufferPos,
    Actual:= stState.nBufferPos,
    Message:= CONCAT('Expected stState.nBufferPos to equal ', TO_STRING(nExpectedBufferPos)));
    
AssertEquals_UDINT(
    Expected:= nExpectedFieldIndex,
    Actual:= nActualFieldIndex,
    Message:= CONCAT('Expected nActualFieldIndex to equal ', TO_STRING(nExpectedFieldIndex)));]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldReadRepeatedFieldTheory" Id="{0d53312c-bed0-4be6-a5e4-c857a27b82d7}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldReadRepeatedFieldTheory : REFERENCE TO FB_Test
VAR CONSTANT
    cRawValueZeroLength     : ARRAY[0..15] OF BYTE := [16#0A, 16#00];
    cRawValue1              : ARRAY[0..15] OF BYTE := [16#00, 16#0A, 16#07, 16#00, 16#01, 16#FF, 16#01, 16#96, 16#01, 16#04];
    cRawBytesOverflow       : ARRAY[0..15] OF BYTE := [16#0A, 16#06, 16#80, 16#02, 16#81, 16#02, 16#82, 16#02];
END_VAR

VAR CONSTANT
    aExpectedZeroLength     : ARRAY [0..15] OF BYTE := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    aExpected1              : ARRAY [0..15] OF BYTE := [0, 1, 255, 150, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    aExpectedBytesOverflow  : ARRAY [0..15] OF BYTE := [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
END_VAR

VAR
    viExpected : __SYSTEM.VAR_INFO;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

ShouldReadRepeatedField(aBuffer:= cRawValueZeroLength, aExpected:= aExpectedZeroLength, nBufferPosStart:= 0, nExpectedBufferPos:= 2, nExpectedFieldIndex:= 0);
ShouldReadRepeatedField(aBuffer:= cRawValue1, aExpected:= aExpected1, nBufferPosStart:= 1, nExpectedBufferPos:= 10, nExpectedFieldIndex:= 5);
ShouldReadRepeatedField(aBuffer:= cRawBytesOverflow, aExpected:= aExpectedBytesOverflow, nBufferPosStart:= 0, nExpectedBufferPos:= 8, nExpectedFieldIndex:= 3);

TEST_FINISHED_NAMED(__POUNAME());]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>