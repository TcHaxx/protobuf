<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_WriteFloatTests" Id="{31163e40-0c45-426b-ae36-469b8861c590}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FB_WriteFloatTests EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ShouldWriteFloatTheory();]]></ST>
    </Implementation>
    <Method Name="ShouldWriteFloat" Id="{095ccb5e-930b-4cf6-a349-a5ab30f4dab3}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldWriteFloat
VAR_IN_OUT CONSTANT
    aExpectedBuffer         : ARRAY[*] OF BYTE;
END_VAR
VAR_INPUT CONSTANT
    fValue              : REAL;
    nBufferPosStart     : UDINT;
    nExpectedBufferPos  : UDINT;
END_VAR
VAR_INST
    fbCtx   : FB_WriteContext;
END_VAR
VAR
    hrActual : HRESULT; 
    aActualBuffer       : ARRAY[0..15] OF BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Arrange
fbCtx.FromBuffer(aActualBuffer);
fbCtx.refCtx.stState.nBufferPos := nBufferPosStart;

// Act
hrActual := F_WriteFloat(fbCtx.refCtx, fValue);

// Assert
AssertEquals_DINT(
     Expected:= S_OK,
     Actual:= hrActual,
     Message:= 'Expected S_OK instead of error');

{warning disable C0041}
AssertArrayEquals_BYTE(    
    Expecteds:= aExpectedBuffer,
    Actuals:= aActualBuffer,
    MEssage:= CONCAT('Expected buffers to be equal for Float ', TO_STRING(fValue)));

AssertEquals_UDINT(
    Expected:= nExpectedBufferPos,
    Actual:= fbCtx.refCtx.stState.nBufferPos,
    Message:= CONCAT(CONCAT('Expected stState.nBufferPos to equal ', TO_STRING(nExpectedBufferPos)), CONCAT(', for Float ', TO_STRING(fValue))));]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldWriteFloatTheory" Id="{796157cf-180d-4395-8d26-a5cf9eaf8f03}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldWriteFloatTheory
VAR CONSTANT
    cExpectedRawValue0          : ARRAY[0..15] OF BYTE := [16#0];
    cExpectedRawValue0_1        : ARRAY[0..15] OF BYTE := [16#0, 16#CD, 16#CC, 16#CC, 16#3D];
    cExpectedRawValueNeg1       : ARRAY[0..15] OF BYTE := [16#0, 16#00, 16#00, 16#80, 16#BF];
    cExpectedRawValue13_37      : ARRAY[0..15] OF BYTE := [16#0, 16#0, 16#85, 16#EB, 16#55, 16#41];
    cExpectedRawValueNeg13_37   : ARRAY[0..15] OF BYTE := [16#0, 16#0, 16#85, 16#EB, 16#55, 16#C1];
    cExpectedRawValueMaxReal    : ARRAY[0..15] OF BYTE := [16#FD, 16#FF, 16#7F, 16#7F];
    cExpectedRawValuePosMinReal : ARRAY[0..15] OF BYTE := [16#07, 16#00, 16#00, 16#00];
    cExpectedRawValueNegMaxReal : ARRAY[0..15] OF BYTE := [16#07, 16#00, 16#00, 16#80];
    cExpectedRawValueMinReal    : ARRAY[0..15] OF BYTE := [16#FD, 16#FF, 16#7F, 16#FF];     
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

ShouldWriteFloat(cExpectedRawValue0, fValue:= 0, nBufferPosStart:= 0, nExpectedBufferPos:= 4);
ShouldWriteFloat(cExpectedRawValue0_1, fValue:= 0.1, nBufferPosStart:= 1, nExpectedBufferPos:= 5);
ShouldWriteFloat(cExpectedRawValueNeg1, fValue:= -1.0, nBufferPosStart:= 1, nExpectedBufferPos:= 5);
ShouldWriteFloat(cExpectedRawValue13_37, fValue:= 13.37, nBufferPosStart:= 2, nExpectedBufferPos:= 6);
ShouldWriteFloat(cExpectedRawValueNeg13_37, fValue:= -13.37, nBufferPosStart:= 2, nExpectedBufferPos:= 6);
ShouldWriteFloat(cExpectedRawValueMaxReal, fValue:= 3.402823E+38, nBufferPosStart:= 0, nExpectedBufferPos:= 4);
ShouldWriteFloat(cExpectedRawValuePosMinReal, fValue:= 1.0E-44, nBufferPosStart:= 0, nExpectedBufferPos:= 4);
ShouldWriteFloat(cExpectedRawValueNegMaxReal, fValue:= -1.0E-44, nBufferPosStart:= 0, nExpectedBufferPos:= 4);
ShouldWriteFloat(cExpectedRawValueMinReal, fValue:= -3.402823E+38, nBufferPosStart:= 0, nExpectedBufferPos:= 4);

TEST_FINISHED_NAMED(__POUNAME());]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>