<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_WriteStringTests" Id="{239a2ff9-c9f9-4bf1-a475-f729fd46ae56}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK INTERNAL FB_WriteStringTests EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ShouldWriteStringTheory();]]></ST>
    </Implementation>
    <Method Name="ShouldWriteString" Id="{d748fce1-411e-4799-95cb-59c7dc5dc48e}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldWriteString
VAR_IN_OUT CONSTANT
    aExpectedBuffer         : ARRAY[*] OF BYTE;
    sStringToWrite          : T_ProtobufMaxString;
END_VAR
VAR_INPUT CONSTANT
    nBufferPosStart     : UDINT;
    nExpectedBufferPos  : UDINT;
END_VAR
VAR
    stState : ST_WriterInternalState;
    hrActual : HRESULT; 
    aActualBuffer       : ARRAY[0..255] OF BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Arrange
stState.nBufferSize := TO_UDINT(UPPER_BOUND(aExpectedBuffer, 1) + 1);
stState.nBufferPos := nBufferPosStart;

// Act
hrActual := F_WriteString(aActualBuffer, stState, sStringToWrite);

// Assert
AssertEquals_DINT(
     Expected:= S_OK,
     Actual:= hrActual,
     Message:= 'Expected S_OK instead of error');

{warning disable C0041}
AssertArrayEquals_BYTE(    
    Expecteds:= aExpectedBuffer,
    Actuals:= aActualBuffer,
    MEssage:= CONCAT('Expected buffers to be equal for String ', LEFT(sStringToWrite, 32)));
    
AssertEquals_UDINT(
    Expected:= nExpectedBufferPos,
    Actual:= stState.nBufferPos,
    Message:= CONCAT('Expected stState.nBufferPos to equal ', TO_STRING(nExpectedBufferPos)));    ]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShouldWriteStringTheory" Id="{290a0cb0-019d-4a3b-b1cd-c43e3e0e850b}">
      <Declaration><![CDATA[METHOD PRIVATE ShouldWriteStringTheory
VAR CONSTANT
cExpectedRawString_Empty    : ARRAY[0..255] OF BYTE := [16#0];
cExpectedRawString_Space    : ARRAY[0..255] OF BYTE := [16#00, 16#1, 16#20];
cExpectedRawString_012345   : ARRAY[0..255] OF BYTE := [16#00, 16#00, 16#06, 16#30, 16#31, 16#32, 16#33, 16#34, 16#35];
cExpectedRawString_UTF8     : ARRAY[0..255] OF BYTE := [16#28, 16#75, 16#74, 16#66, 16#2D, 16#38, 16#3A, 16#20, 16#61, 16#2D, 16#7A, 16#2C, 16#20, 16#41, 16#2D, 16#5A, 16#2C, 16#20, 16#30, 16#2D, 16#39, 16#2C, 16#20, 16#C3, 16#A4, 16#C3, 16#84, 16#C3, 16#B6, 16#C3, 16#96, 16#C3, 16#BC, 16#C3, 16#9C, 16#C3, 16#9F, 16#F0, 16#9F, 16#9A, 16#80];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(__POUNAME());

ShouldWriteString(cExpectedRawString_Empty, '', 0, 1);
ShouldWriteString(cExpectedRawString_Space, ' ', 1, 3);
ShouldWriteString(cExpectedRawString_012345, '012345', 2, 9);
ShouldWriteString(cExpectedRawString_UTF8, 'utf-8: a-z, A-Z, 0-9, äÄöÖüÜß🚀', 0, 41);


TEST_FINISHED_NAMED(__POUNAME());]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>