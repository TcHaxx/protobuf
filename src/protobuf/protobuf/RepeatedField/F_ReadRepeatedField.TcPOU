<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="F_ReadRepeatedField" Id="{3275937c-bc24-42b8-bf5d-84307b144b13}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION INTERNAL F_ReadRepeatedField : HRESULT
VAR_INPUT
    stBuffer : ST_Span;
END_VAR
VAR_IN_OUT
    stState         : ST_ParserInternalState;
END_VAR
VAR_INPUT CONSTANT
    anyArray        : T_Any;
    anyFirstElem    : T_Any;
    ipFieldCodec    : I_FieldCodec; 
END_VAR

VAR_IN_OUT   
    nFieldIndex : UDINT; 
END_VAR
VAR
    nTag        : UDINT;
    hr          : HRESULT;
    nLength     : UDINT;
    nArrayLength: UDINT;
    nByteLength : UDINT;
    nTypeSize   : UDINT;
    bTagConsumed: BOOL;
    nBufferEnd  : UDINT;  
    anyValue    : T_ANY;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF ipFieldCodec = 0 THEN
    F_ReadRepeatedField := stState.eParserErrorCode := E_ParserErrorCode.InternalError;
    stState.bError := TRUE;
    RETURN;
END_IF

IF anyArray.TypeClass <> __SYSTEM.TYPE_CLASS.TYPE_ARRAY THEN
    F_ReadRepeatedField := stState.eParserErrorCode := E_ParserErrorCode.InvalidDataType;
    stState.bError := TRUE;
    RETURN;
END_IF

nTypeSize := TO_UDINT(anyFirstElem.diSize);

IF nTypeSize = 0 THEN
    F_ReadRepeatedField := stState.eParserErrorCode := E_ParserErrorCode.InvalidDataType;
    stState.bError := TRUE;
    RETURN;
END_IF

nByteLength := TO_UDINT(anyArray.diSize);
nArrayLength := nByteLength / nTypeSize;

nTag := stState.nLastTag;

IF  nFieldIndex < 0 OR nFieldIndex >= nArrayLength THEN
    F_ReadRepeatedField := stState.eParserErrorCode := E_ParserErrorCode.NotEnoughMem;
    stState.bError := TRUE;
    RETURN;
END_IF

IF ipFieldCodec.IsPackedRepeatedField(nTag) THEN
    
    hr := F_ParseLength(stBuffer, stState, nLength=> nLength);
    IF FAILED(hr) OR nLength <= 0 THEN
        // Empty packed field, valid - ignore.
        F_ReadRepeatedField := hr;
        RETURN;
    END_IF 
    
    nBufferEnd := stState.nBufferPos + nLength;
    WHILE (stState.nBufferPos < nBufferEnd) DO
        hr := ipFieldCodec.ValueReader(stBuffer, stState, anyOut=> anyValue);
        IF FAILED(hr) THEN
            F_ReadRepeatedField := hr;
            RETURN;
        END_IF
        
        MEMCPY(destAddr:= anyArray.pValue + (nFieldIndex * nTypeSize), srcAddr:= anyValue.pValue, MIN(TO_UDINT(anyValue.diSize), nTypeSize));
        nFieldIndex := nFieldIndex + 1;
    END_WHILE

    
ELSE
    // Not packed or possibly not packable...
    REPEAT
        hr := ipFieldCodec.ValueReader(stBuffer, stState, anyOut=> anyValue);
        IF FAILED(hr) THEN
            F_ReadRepeatedField := hr;
            RETURN;
        END_IF
        
        MEMCPY(destAddr:= anyArray.pValue + (nFieldIndex * nTypeSize), srcAddr:= anyValue.pValue, MIN(TO_UDINT(anyValue.diSize), nTypeSize));
        nFieldIndex := nFieldIndex + 1;
        
        hr := F_MaybeConsumeTag(stBuffer, stState, nTag, bConsumed=> bTagConsumed);
        IF FAILED(hr) THEN
            F_ReadRepeatedField := hr;
            RETURN;
        END_IF
    UNTIL
        NOT bTagConsumed
    END_REPEAT
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>