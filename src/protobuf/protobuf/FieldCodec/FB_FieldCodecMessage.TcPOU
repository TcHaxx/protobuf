<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_FieldCodecMessage" Id="{2b6842e3-d7c2-44a7-bf52-c88156fac8f3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FieldCodecMessage Extends FB_FieldCodec
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CalculatePackedDataSize" Id="{b3546115-ec22-4875-8d6e-4449327f1c2c}">
      <Declaration><![CDATA[{attribute 'analysis' := '-33'}
METHOD CalculatePackedDataSize : HRESULT
VAR_INPUT CONSTANT
	anyFirstElem	: T_Any;
	nLength	        : UDINT;        // items to write
END_VAR
VAR_OUTPUT
    nPackedDataSize : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CalculatePackedDataSize := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{f867bdfb-12c8-48a6-b5a1-7d0c3441f26d}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)
	nTag : UDINT;	
	ipMessage : I_Message;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nTagField := nTag;
ipMessageField := ipMessage;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsPackedRepeatedField" Id="{695c89eb-30cc-4511-b56e-38db99a5dc46}">
      <Declaration><![CDATA[METHOD IsPackedRepeatedField : BOOL
VAR_INPUT
    {attribute 'analysis' := '-33' } 
	nTag	: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IsPackedRepeatedField := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValueReader" Id="{e4223324-5674-4c82-b149-f3471b33ed03}">
      <Declaration><![CDATA[
METHOD ValueReader : HRESULT
VAR_IN_OUT      
    stCtx : ST_ParseContext;
END_VAR
VAR_OUTPUT
	anyOut	: T_Any;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF stCtx.pCurrentContext = NULL THEN
    ValueReader := F_ParseError(stCtx, E_ParserErrorCode.InternalError);
    RETURN;
END_IF

stCtx.pCurrentContext^.InitializeFromState(stBuffer:= stCtx.stBuffer, stState:= stCtx.stState);
ValueReader := F_ReadMessage(fbCtx:= stCtx.pCurrentContext^, iMessage:= THIS^.ipMessageField);
anyOut := THIS^.ipMessageField.MessageValue;
stCtx.stState := stCtx.pCurrentContext^.refCtx.stState;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValueWriter" Id="{fdb65b05-c4a7-47c5-9055-cbbc790d5d7d}">
      <Declaration><![CDATA[METHOD ValueWriter : HRESULT
VAR_IN_OUT
    stCtx  : ST_WriteContext;
END_VAR
VAR_INPUT
    anyIn : T_ANY;
END_VAR
VAR
	eErrorCode : E_WriterErrorCode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// IF THIS^.pWriteContextField = NULL THEN
//     ValueWriter := F_WriteError(stCtx, E_WriterErrorCode.InternalError);
//     RETURN;
// END_IF
// 
// THIS^.pWriteContextField^.InitializeFromState(stBuffer:= stCtx.stBuffer, stState:= stCtx.stState);


eErrorCode := F_SetMessageValue(anyValue:= anyIn, iMessage:= THIS^.ipMessageField);
IF FAILED(eErrorCode) THEN
	F_WriteError(stCtx, eErrorCode);
	RETURN;
END_IF

// ValueWriter := F_WriteMessage(fbCtx:= THIS^.pWriteContextField^, THIS^.ipMessageField);
ValueWriter := F_WriteMessage(stCtx:= stCtx, THIS^.ipMessageField);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>