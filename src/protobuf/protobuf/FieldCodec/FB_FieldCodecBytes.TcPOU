<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_FieldCodecBytes" Id="{6f2521e3-84e2-4b07-9088-733e03d8d8ec}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FieldCodecBytes IMPLEMENTS I_FieldCodec
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    aValue      : ARRAY[0..Param_PB.cFieldCodecBytesDefaultSize - 1] OF BYTE;        // default buffer size, if more bytes are needed, set size with "SetAnyBytes" method.
    tAnyBytes : T_AnyBytes;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CalculatePackedDataSize" Id="{145dc631-a514-4dad-b121-dbf5b139ddf2}">
      <Declaration><![CDATA[{attribute 'analysis' := '-33'}
METHOD CalculatePackedDataSize : HRESULT
VAR_INPUT CONSTANT
	anyFirstElem	: T_Any;
	nLength	        : UDINT;        // items to write
END_VAR
VAR_OUTPUT
    nPackedDataSize : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CalculatePackedDataSize := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsPackedRepeatedField" Id="{f55e498c-009e-42d9-a3d4-1aee876f4b68}">
      <Declaration><![CDATA[METHOD IsPackedRepeatedField : BOOL
VAR_INPUT
    {attribute 'analysis' := '-33' } 
	nTag	: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IsPackedRepeatedField := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTmpBuffer" Id="{e8632774-c3c7-4625-b58b-3da822eb9cf0}">
      <Declaration><![CDATA[// Map ARRAY [*] OF BYTE for field repeated bytes
METHOD INTERNAL SetTmpBuffer
VAR_INPUT
    anyBytes : T_AnyBytes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.tAnyBytes := anyBytes;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValueReader" Id="{51284e44-3de6-4991-93bd-086796106a10}">
      <Declaration><![CDATA[
METHOD ValueReader : HRESULT
VAR_IN_OUT      
    stCtx : ST_ParseContext;
END_VAR
VAR_OUTPUT
	anyOut	: T_Any;
END_VAR
VAR
    nLength : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ValueReader := F_ParseLength(stCtx, nLength=> nLength);
IF FAILED(ValueReader) THEN
    RETURN;
END_IF

IF tAnyBytes.pValue <> NULL THEN
    anyOut := tAnyBytes;
ELSE
    anyOut := F_ToAnyBytes(aValue);
END_IF

ValueReader := F_ReadRawBytes(stCtx, anyOut, nLength);
anyOut.diSize := TO_DINT(nLength);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValueWriter" Id="{44ad94e9-25af-4045-92d0-4895405d85b6}">
      <Declaration><![CDATA[METHOD ValueWriter : HRESULT
VAR_IN_OUT
    stCtx  : ST_WriteContext;
END_VAR
VAR_INPUT
    anyIn : T_ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning 'FIXME: This should write the actual number of bytes, otherwise we waste space on the wire...'}
ValueWriter := F_WriteLength(stCtx, TO_UDINT(anyin.diSize));
IF SUCCEEDED(ValueWriter) THEN
	ValueWriter := F_WriteRawBytes(stCtx, anyIn, TO_UDINT(anyin.diSize));
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>