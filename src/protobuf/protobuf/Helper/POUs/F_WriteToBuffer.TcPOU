<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="F_WriteToBuffer" Id="{33b34f65-e388-4c61-86ed-3ee8b9348237}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION F_WriteToBuffer : HRESULT
VAR_IN_OUT      
    stCtx : ST_WriteContext;
END_VAR
VAR_INPUT
    anyData       : T_ANY;
    nLength       : UDINT;      // Items to write 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF stCtx.stBuffer.pBuffer = NULL OR stCtx.stBuffer.nSize = 0 THEN
    F_WriteToBuffer := stCtx.stState.eWriterErrorCode := E_WriterErrorCode.NotEnoughMem;
    stCtx.stState.bError := TRUE;
    RETURN;    
END_IF

IF nLength > stCtx.stState.nBufferSize - stCtx.stState.nBufferPos THEN
    F_WriteToBuffer := stCtx.stState.eWriterErrorCode := E_WriterErrorCode.TruncatedMessage;
    stCtx.stState.bError := TRUE;
    RETURN;
END_IF

IF nLength > TO_UDINT(anyData.diSize) THEN
    F_WriteToBuffer := stCtx.stState.eWriterErrorCode := E_WriterErrorCode.NotEnoughMem;
    stCtx.stState.bError := TRUE;
    RETURN;
END_IF

MEMCPY(destAddr:= stCtx.stBuffer.pBuffer + stCtx.stState.nBufferPos, srcAddr:= anyData.pValue, n:=  nLength);
stCtx.stState.nBufferPos := stCtx.stState.nBufferPos + nLength;]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>